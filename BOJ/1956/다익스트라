
/*
 * 최단거리 알고리즘
 * 
 * 1 ~ V까지 자신을 제외한 다른 마을까지 이동하는 최소 경로 비용 + 그 마을에서 다시 자신으로 이동하는 최소 경로 비용 구하기
 * -> (X, Y)와 (Y, X)는 같다. -> 순서만 다르지 dijkstra(X, Y) + dijkstra(Y, X)기 때문이다.
 * -> V + (V - 1) + (V - 2) + ... + 1 = V(V - 1) / 2
 * 
 * 다익스트라 알고리즘 시간 복잡도 : O(V^2)
 * 
 * -> O(V^4) -> V가 최대 400이므로 불가능..
 * 
 * O(V^3) ?
 * 다익스트라 약간 변형해서 사용
 * -> 목적지를 자기 자신으로 정해서 그때까지 계속 최소 비용인 도로만 선택
 * 1 ~ V까지 한 번만 돌며 다익스트라 한 번만 호출 가능 -> O(V^3)
 * 
 * 플로이드 워셜로 풀어도 됨 -> 모든 지점 ~ 모든 나머지 지점 최단 거리를 구할 수 있다.
 * 
 * 플로이드 워셜이 다익스트라보다 3배 이상 빠르다.
 * 모든 지점 -> 나머지 모든 지점으로의 최단 경로를 찾을 땐 항상 플로이드 워셜을 쓰자.
 */
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.IOException;
import java.util.List;
import java.util.ArrayList;

public class Main {
	private static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	private static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	private static final int INFINITY = 400 * 10000 + 1;

	private static int readInt() throws IOException {
		int n = 0, cur;

		while (48 <= (cur = br.read()) && cur <= 57)
			n = (n << 3) + (n << 1) + (cur & 15);
		return n;
	}

	private static int findLowestCostTown(int[] costs, boolean[] processed) {
		int lowestCost = INFINITY, lowestCostTown = -1;

		for (int i = 0; i < costs.length; i++) {
			if (!processed[i] && costs[i] < lowestCost) {
				lowestCost = costs[i];
				lowestCostTown = i;
			}
		}
		return lowestCostTown;
	}

	// 시작 지점은 방문체크하지 않고 시작 -> 시작 지점만 재방문 가능. 재방문시 종료.
	// INFINITY가 E의 최댓값 * 10000 + 1이 아닌 V의 최댓값 * 10000 + 1인 이유: 자신을 제외한 399개의 도시를 모두
	// 방문하고 마지막 도시에서 자신으로 돌아오는 게 최대 비용 경로이므로.
	// 만약 중간에 있는 399개의 경로 중 자신으로 돌아가는 경로가 있다면 그 뒤로 남은 399개 중 일부 도시들은 방문할 필요 자체가 없다.
	// 따라서 시작 지점을 제외한 나머지 마을들은 방문체크를 해도 된다. -> 다시 방문할 일이 없으므로
	// 예를 들어 1 -> 2 -> 3 -> 1의 경로가 가능할 때, 2에서 1로 가는 경로도 있다면, 애초에 3을 방문할 필요가 없고, 3에서
	// 2로 돌아갈 필요도 없이 그냥 1 -> 2 -> 1 경로를 취하면 된다.
	// 추가) 시작지점도 방문체크 해도 문제 없을듯. 인접 도시를 확인하는 로직에서 시작 지점이 인접도시라면 적절하게 반환하면 된다.
	// 추가) 1->2: 1, 2->3: 1, 3->1: 1, 2->1: 3일 땐 1->2->1이 아닌 1->2->3->1을 선택해야 하므로
	// 위 로직은 틀리다.
	private static int solve(List<List<int[]>> graph, int v, int e, int town) {
		int cur, newCost, ret = INFINITY;
		int[] costs = new int[v];
		boolean[] processed = new boolean[v];

		for (int i = 0; i < v; i++)
			costs[i] = INFINITY;
		costs[town] = 0;
		while ((cur = findLowestCostTown(costs, processed)) != -1) {
			for (int[] neighbor : graph.get(cur)) {
				newCost = costs[cur] + neighbor[1];
				// 1->2->1보다 1->2->3->1이 더 비용이 적을 수 있으므로 모든 가능성을 다 체크해봐야 한다.
				if (neighbor[0] == town)
					ret = Math.min(ret, newCost);
				if (!processed[neighbor[0]] && newCost < costs[neighbor[0]])
					costs[neighbor[0]] = newCost;
			}
			processed[cur] = true;
		}
		return ret;
	}

	public static void main(String[] args) throws IOException {
		int v = readInt(), e = readInt(), res = INFINITY;
		List<List<int[]>> graph = new ArrayList<>();

		for (int i = 0; i < v; i++)
			graph.add(new ArrayList<>());
		for (int i = 0; i < e; i++)
			graph.get(readInt() - 1).add(new int[] { readInt() - 1, readInt() });
		for (int i = 0; i < v; i++)
			res = Math.min(res, solve(graph, v, e, i));
		bw.append(String.valueOf(res == INFINITY ? -1 : res)).append('\n');
		bw.flush();
		br.close();
		bw.close();
	}
}
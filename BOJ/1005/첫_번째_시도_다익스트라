
/*
 * 다익스트라.
 * 단, 최단 거리가 아닌 최대 거리를 구해야 한다. -> 다익스트라에서 음수 간선 허용 안되므로 건설 시간의 최댓값인 100000에서 실제 건설 시간을 빼서 사용.
 * 
 * 문제 조건에서 시작 건물이 정해지지 않았다.
 * 반드시 지어야하는 최종 건물만 정해져있다.
 * 
 * 반례
 * 예제 입력 2의 세 번째 테스트 케이스
 * 1->2->3->4 순서로 지어야 한다.
 * 하지만 이 로직으로 구하면 1->4, 2->4, 3->4 중 가장 오래걸리는 것 하나만 고르게 된다.
 * 100000에서 실제 건설 시간을 빼서 사용하더라도, 건설 시간들 사이의 순서만 거꾸로 바뀔 뿐이지 다익스트라는 순서가 바뀐 건설 시간들을 가지고
 * 최단 경로를 찾을 뿐이다.
 * 결국 최장 경로를 찾는데 다익스트라를 쓸 수 없다.
 * 5
 * 3 2
 * 1 2 3
 * 3 2
 * 2 1
 * 1
 * 4 3
 * 5 5 5 5
 * 1 2
 * 1 3
 * 2 3
 * 4
 * 5 10
 * 100000 99999 99997 99994 99990
 * 4 5
 * 3 5
 * 3 4
 * 2 5
 * 2 4
 * 2 3
 * 1 5
 * 1 4
 * 1 3
 * 1 2
 * 4
 * 4 3
 * 1 1 1 1
 * 1 2
 * 3 2
 * 1 4
 * 4
 * 7 8
 * 0 0 0 0 0 0 0
 * 1 2
 * 1 3
 * 2 4
 * 3 4
 * 4 5
 * 4 6
 * 5 7
 * 6 7
 * 7
 */
import java.io.IOException;
import java.util.List;
import java.util.ArrayList;
import java.util.PriorityQueue;

public class Main {
	private static int n;
	private static int[] times;
	private static List<List<Integer>> orders;
	private static final int INFINITY = 1000 * 100000 + 1;
	private static PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);

	private static int readInt() throws IOException {
		int n = System.in.read() & 15, cur;

		while (48 <= (cur = System.in.read()) && cur <= 57)
			n = (n << 3) + (n << 1) + (cur & 15);
		return n;
	}

	// 다익스트라
	// 간선의 최대 수(100000)이 (노드의 최대 수)^2 / log(노드의 최대 수) = 3333333.... 보다 작으므로 우선순위 큐를
	// 사용하자.
	private static int solve(int targetBuilding) {
		int[] costs = new int[n], realCosts = new int[n];
		boolean[] processed = new boolean[n];
		int newCost, cur;

		for (int i = 0; i < n; i++)
			costs[i] = INFINITY;
		pq.add(new int[] { targetBuilding, times[targetBuilding] });
		costs[targetBuilding] = times[targetBuilding];
		realCosts[targetBuilding] = 100000 - times[targetBuilding];
		while (!pq.isEmpty()) {
			cur = pq.poll()[0];
			if (processed[cur])
				continue;
			for (int neighbor : orders.get(cur)) {
				if (!processed[neighbor] && (newCost = costs[cur] + times[neighbor]) < costs[neighbor]) {
					pq.add(new int[] { neighbor, (costs[neighbor] = newCost) });
					realCosts[neighbor] = realCosts[cur] + 100000 - times[neighbor];
				}
			}
			processed[cur] = true;
		}
		// 어떤 값을 반환해야 할까?
		// 일단 costs가 INFINITY인 건물들은 targetBuilding의 건설 관련이 없는 건물들이므로 제외.
		// costs가 가장 작은 건물을 반환하면 targetBuilding과 가장 가까우면서 건설 시간이 가장 짧은 건물이 선택될 것이므로 제외.
		// costs가 가장 큰 건물을 찾아서 100000 * 거쳐간 건물의 수 - costs값을 반환해야 한다.
		// 방법은 2개다. 각 건물에 대한 별도의 int[]을 사용해서 실제 건설 시간을 업데이트한 후, 그 중 INFINITY가 아니면서 가장 값이
		// 큰 것을 반환하거나 각 건물에 도달하기 위해 거쳐가야 하는 순서를 저장하는 배열을 사용해 거쳐간 건물의 수를 구하거나.
		// 첫 번째 방법은 가장 비용이 큰 건물을 찾는데 O(n)
		// 두 번째 방법은 costs가 가장 큰 건물을 찾는 데 O(n) + 건물의 수 구하는 데 O(n)
		// -> 첫 번째 방법으로 하자.
		// cur 재활용
		cur = 0;
		for (int i = 1; i < n; i++)
			if (realCosts[cur] < realCosts[i])
				cur = i;
		return realCosts[cur];
	}

	public static void main(String[] args) throws IOException {
		int t = readInt(), k, pre;
		StringBuilder sb = new StringBuilder();

		while (t-- > 0) {
			n = readInt();
			k = readInt();
			times = new int[n];
			orders = new ArrayList<>();
			for (int i = 0; i < n; i++) {
				times[i] = 100000 - readInt();
				orders.add(new ArrayList<>());
			}
			for (int i = 0; i < k; i++) {
				pre = readInt() - 1;
				orders.get(readInt() - 1).add(pre);
			}
			sb.append(solve(readInt() - 1)).append('\n');
		}
		System.out.print(sb.toString());
	}
}
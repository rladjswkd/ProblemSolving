
/*
 * 처음엔 배열을 정렬한 후(O(nlogn), 두 값을 선택하고(O(n^2)), 남은 값을 이분 탐색으로 찾는 방법(O(logn)을
 * 생각했었다.
 * -> (O(nlogn + n^2 * logn))
 * 하지만, 이분 탐색에서 이미 선택한 두 값 중 하나를 다시 선택하는 경우에 어떻게 처리해야할지 애매했다.
 * (예를 들어, -50, 100을 선택해서 이분 탐색에서 -50을 찾는데 -50이 하나뿐이라면?)
 * 게다가 정확히 0을 만드는 것이 아니라 0에 가장 가까운 값을 만드는 것이므로, 조금 애매하다.
 * 만약 정확히 0을 만들기 위해 찾아야 하는 값이 x라고 하면, x+1, x+2,... 등은 upper bound로 찾을 수 있지만, 만약
 * x - 1이 배열 내에 존재한다 해도 이를 어떻게 이분 탐색으로 찾을 수 있을까?
 * 
 * ---
 * 
 * 그 다음으로 생각한 게 투 포인터 방식이다.
 * 1 ~ n - 2 범위를 순회하는 포인터 i와 두 포인터 l = i - 1, r = i + 1를 더한 값이 음수면 r++, 양수면 l--.
 * 양수인데 l이 0이면 i를 다음으로 넘기기
 * 음수인데 r이 n - 1이면 i를 다음으로 넘기기
 * 
 * 이 방식은 결국 시간초과가 난다 -> 0 ~ 4999 까지 5000 개의 숫자 데이터를 생성해서 테스트해보면 무조건 시간초과임을 알 수 있다.
 * 
 * l, i를 유지하되 r을 i + 1 ~ n - 1 범위에서 이분 탐색으로 찾자.
 * 
 */
import java.io.IOException;
import java.util.Arrays;

public class Main {
	private static int n, l1, l2, l3;
	private static int[] liquids;
	private static long closest = Long.MAX_VALUE;

	private static int readInt() throws IOException {
		int n = 0, cur, sign = System.in.read();

		if (sign != 45)
			n = sign & 15;
		while (48 <= (cur = System.in.read()) && cur <= 57)
			n = (n << 3) + (n << 1) + (cur & 15);
		if (sign == 45)
			n = ~n + 1;
		return n;
	}

	private static void calculateClosest(int i, int j, long part) {
		int start = j + 1, end = n - 1, mid;
		long abs;

		while (start <= end) {
			mid = (start + end) >>> 1;
			if ((abs = Math.abs(part + liquids[mid])) < closest) {
				closest = abs;
				l1 = liquids[i];
				l2 = liquids[j];
				l3 = liquids[mid];
			}
			if (part + liquids[mid] < 0)
				start = mid + 1;
			else if (part + liquids[mid] > 0)
				end = mid - 1;
			else
				break;
		}
	}

	private static void solve() {
		for (int i = 0; i < n - 2; i++)
			for (int j = i + 1; j < n - 1; j++)
				calculateClosest(i, j, liquids[i] + liquids[j]);
	}

	public static void main(String[] args) throws IOException {
		n = readInt();
		liquids = new int[n];
		for (int i = 0; i < n; i++)
			liquids[i] = readInt();
		Arrays.sort(liquids);
		solve();
		System.out.println(new StringBuilder().append(l1).append(' ').append(l2).append(' ').append(l3).toString());
	}
}
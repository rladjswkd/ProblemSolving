import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.IOException;
import java.util.Arrays;

public class Main {
	private static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	private static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	private static int[] numbers;
	// 한 번 두 수의 합으로 표현할 수 있다는 걸 확인한 수는 중복해서 확인하면 안된다.
	private static boolean[] visited;

	private static int readInt() throws IOException {
		int n = 0, cur, sign = br.read();

		if (sign != '-')
			n = sign - 48;
		while (48 <= (cur = br.read()) && cur <= 57)
			n = (n << 3) + (n << 1) + (cur & 15);
		if (sign == '-')
			n = -n;
		return n;
	}

	// target이 numbers 내에 여러 개가 있을 때 그 중 인덱스 값이 가장 작은 target을 찾고 그 인덱스부터 모든 target을
	// 순회하며 excludeIdx1, excludeIdx2와 다른 인덱스의 target이 있는지 확인해야 한다.
	// numbers[excludeIdx1]과 numbers[excludeIdx2]가 모두 target과 값이 다르면 불필요한 과정이긴 하지만
	// 어차피 그러면 순회하는 과정에서 단 한 번의 이터레이션만 돌과 return 1을 하게 되기 때문에 큰 문제는 없다.
	private static int binarySearch(int target, int excludeIdx1, int excludeIdx2) {
		int start = 0, end = numbers.length - 1, mid = 0, res = 0;

		while (start < end) {
			mid = (start + end) >>> 1;
			if (target <= numbers[mid])
				end = mid;
			else if (target > numbers[mid])
				start = mid + 1;
		}
		// 숫자가 7개고 1 2 3 3 3 3 3과 같이 주어지면 정답은 5여야 한다.
		for (int i = start; i < numbers.length && numbers[i] == target; i++) {
			if (!visited[i] && i != excludeIdx1 && i != excludeIdx2) {
				visited[i] = true;
				res++;
			}
		}
		return res;
	}

	public static void main(String[] args) throws IOException {
		int res = 0;

		numbers = new int[readInt()];
		visited = new boolean[numbers.length];
		for (int i = 0; i < numbers.length; i++)
			numbers[i] = readInt();
		Arrays.sort(numbers);
		// 두 수를 더한 결과 값을 이분탐색으로 찾되, 이 결과 값은 numbers[i]나 numbers[j]여선 안된다.
		for (int i = 0; i < numbers.length; i++)
			for (int j = i + 1; j < numbers.length; j++)
				res += binarySearch(numbers[i] + numbers[j], i, j);
		bw.append(String.valueOf(res)).append('\n');
		bw.flush();
		br.close();
		bw.close();
	}
}
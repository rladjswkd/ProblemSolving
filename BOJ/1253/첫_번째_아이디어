
/*
 * 시간 상 문제 없어서 브루트포스로 품
 * 
 * 하지만 다음과 같은 반례를 처리하지 못함
 * 2
 * 0 0
 * 두 수를 더한 결과인 수를 찾아야 하므로 답은 0이지만(0과 0을 더하면 결과로 취급할 나머지 수가 남아있지 않다.) 이 코드의 답은 2다.
 * 
 * 정렬 후 두 수를 더한 결과를 이분 탐색하는 방법으로 가자
 */
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.IOException;
import java.util.Set;
import java.util.HashSet;

public class Main {
	private static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	private static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

	private static int readInt() throws IOException {
		int n = 0, cur, sign = br.read();

		if (sign != '-')
			n = sign - 48;
		while (48 <= (cur = br.read()) && cur <= 57)
			n = (n << 3) + (n << 1) + (cur & 15);
		if (sign == '-')
			n = -n;
		return n;
	}

	public static void main(String[] args) throws IOException {
		int[] numbers = new int[readInt()];
		int res = 0;
		Set<Integer> s = new HashSet<>();

		for (int i = 0; i < numbers.length; i++)
			numbers[i] = readInt();
		for (int i = 0; i < numbers.length; i++)
			for (int j = i + 1; j < numbers.length; j++)
				s.add(numbers[i] + numbers[j]);
		for (int number : numbers)
			if (s.contains(number))
				res++;
		bw.append(String.valueOf(res)).append('\n');
		bw.flush();
		br.close();
		bw.close();
	}
}

/*
 * 자신의 키가 몇 번째인지 알기 위한 기준?
 * 자신보다 키가 큰 사람의 수가 x가라고 할 때, 이 값이 유일해야 하며 x - 1인 사람들 모두에 대한 연결정보가 있어야 한다.
 * 
 * ex) 	6번 학생과 2번 학생은 자신보다 키가 큰 사람의 수, x가 0이고, 4번 학생은 x가 1이다.
 * x가 1인 값은 4번 학생이 유일하며 x - 1 = 0인 6번 학생과 2번 학생 모두에 대한 연결 정보가 있으므로 자신의 키가 몇 번째인지 안다.
 * 
 * 반대로 6번 학생과 2번 학생, 3번 학생과 5번 학생은 연결 정보를 모두 갖고 있지만, 유일하지 않기 때문에 자신의 키가 몇 번째인지 알지 못한다.
 * 
 * 1번 학생은 x 값이 유일하지만 x - 1의 값을 갖는 3번 학생과 5번 학생 모두에 대한 연결 정보를 갖지 않기 때문에 자신의 키가 몇 번째인지 알지 못한다.
 * 
 * 아예 분리된 집합이 여러 개 존재하면? -> 무조건 0 출력
 * 
 * 이를 종합해서 간단하게 하면 문제에 나온 것처럼 한 학생에 대해 자신보다 큰 학생의 수와 자신보다 작은 학생의 수를 더했을 때 그 값이 n - 1이면 된다.
 * 
 * dfs로 1 -> 6 방문 가능한지 체크하는 과정에서 1 -> 5, 1 -> 4, 5 -> 4, 5 -> 6, 4 -> 6도 모두 방문 가능으로 체크할 수 있나?
 * 인자로 현재 학생보다 이전에 있는 학생들을 담은 List 등을 전달하면 할 수 있지만, 메모리를 비효율적으로 많이 사용하게 되고,
 * 그렇게 처리한 다음 3 -> 6을 처리하는 과정에서 4 -> 6을 중복적으로 처리한다.
 * 
 * 500명의 학생 모두에 대해 나머지 499명에 방문할 수 있는지 확인 -> 499명 모두 경로 상 노드가 499개라고 해도(비현실적) 500의 3제곱보다 작다.
 */
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.IOException;
import java.util.List;
import java.util.ArrayList;
import java.util.Deque;
import java.util.ArrayDeque;

public class Main {
	private static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	private static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	private static List<List<Integer>> graph = new ArrayList<>();

	private static int readInt() throws IOException {
		int n = 0, cur;

		while (48 <= (cur = br.read()) && cur <= 57)
			n = (n << 3) + (n << 1) + (cur & 15);
		return n;
	}

	// bfs
	private static boolean findShortestPath(int start, int end) {
		Deque<Integer> q = new ArrayDeque<>();
		boolean[] visited = new boolean[graph.size()];
		int cur;

		q.addLast(start);
		visited[start] = true;
		while (!q.isEmpty()) {
			cur = q.removeFirst();
			for (int other : graph.get(cur)) {
				if (other == end)
					return true;
				if (!visited[other]) {
					q.addLast(other);
					visited[other] = true;
				}
			}
		}
		return false;
	}

	public static void main(String[] args) throws IOException {
		int studentCount = readInt(), checkCount = readInt(), res = 0;
		// heightInfo[x][0]: x번 학생보다 큰 학생의 수, heightInfo[x][1]: x번 학생보다 작은 학생의 수
		int[][] heightInfo = new int[studentCount][2];

		for (int i = 0; i < studentCount; i++)
			graph.add(new ArrayList<>());
		for (int i = 0; i < checkCount; i++)
			graph.get(readInt() - 1).add(readInt() - 1);
		for (int i = 0; i < studentCount; i++) {
			for (int j = i + 1; j < studentCount; j++) {
				if (findShortestPath(i, j)) {
					heightInfo[i][0]++;
					heightInfo[j][1]++;
				} else if (findShortestPath(j, i)) {
					heightInfo[j][0]++;
					heightInfo[i][1]++;
				}
			}
		}
		for (int i = 0; i < studentCount; i++)
			if (heightInfo[i][0] + heightInfo[i][1] == studentCount - 1)
				res++;
		bw.append(String.valueOf(res)).append('\n');
		bw.flush();
		br.close();
		bw.close();
	}
}
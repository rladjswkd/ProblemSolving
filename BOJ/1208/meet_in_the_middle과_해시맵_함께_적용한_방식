import java.io.*;
import java.util.*;

public class Main {
	static StringBuilder sb = new StringBuilder();
	static int n, s;
	static long res;
	static int[] arr;
	static Map<Integer, Integer> counter;

	private static int readInt() throws IOException {
		int n = 0, cur, sign = System.in.read();

		if (sign != 45)
			n = sign & 15;
		while (48 <= (cur = System.in.read()) && cur <= 57)
			n = (n << 3) + (n << 1) + (cur & 15);
		if (sign == 45)
			n = ~n + 1;
		return n;
	}

	public static void main(String[] args) throws IOException {
		n = readInt();
		s = readInt();
		arr = new int[n];

		for (int i = 0; i < n; i++)
			arr[i] = readInt();
		counter = new HashMap<>();
		rightFuc(n / 2, 0);
		leftFuc(0, 0);
		if (s == 0)
			res--;
		System.out.println(res);
	}

	static void rightFuc(int rightPoint, int sum) {
		if (rightPoint == n) {
			counter.merge(sum, 1, Integer::sum);
			return;
		}
		rightFuc(rightPoint + 1, sum);
		rightFuc(rightPoint + 1, sum + arr[rightPoint]);
	}

	static void leftFuc(int leftPoint, int sum) {
		if (leftPoint == n / 2) {
			res += counter.getOrDefault(s - sum, 0);
			return;
		}
		leftFuc(leftPoint + 1, sum);
		leftFuc(leftPoint + 1, sum + arr[leftPoint]);
	}
}

/*
 * DP
 * 
 * 현재 값까지 가능한 경우의 수를 저장
 * 
 * 25114
 * 2: 2 -> 1
 * 25: 2 5, 25 -> 2
 * 251: 2 5 1, 25 1 -> 2
 * 2511: 2 5 1 1, 2 5 11, 25 1 1, 25 11 -> 4
 * 
 * 1121
 * 1: 1 -> 1, 1
 * 11: 1 1, 11 -> 
 * 112: 1 1 2, 11 2, 1 12 -> 3
 * 1121: 1 1 2 1, 11 2 1, 1 12 1, 1 1 21, 11 21 -> 5
 * 
 * 앞 숫자와 붙여서 가는 경우와 앞 숫자와 따로 가는 경우를 나눠서 저장.
 * 따로 가는 경우는 앞 숫자의 붙여서 가는 경우 + 따로 가는 경우와 같고,
 * 붙여서 가는 경우는 앞 숫자의 따로 가는 경우와 같다.
 * 물론, 붙여서 갈 수 있는 경우는 정해져있으며, 현재 숫자가 0일 떄는 붙여서 갈 수 밖에 없다.
 * 1121
 * 1: 1 -> 1, 0(따로, 붙여서)
 * 11: 1 + 0, 1 -> 1, 1
 * 112: 1 + 1, 1 -> 2, 1
 * 1121: 2 + 1, 2 -> 3, 2
 * 
 */
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.IOException;

public class Main {
	private static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	private static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

	// 암호는 숫자로 이루어져 있다.
	private static int solve(char[] crypto) {
		int[][] dp = new int[crypto.length][2];

		if (crypto[0] == '0')
			return 0;
		dp[0][0] = 1;
		for (int i = 1; i < crypto.length; i++) {
			if (crypto[i] == '0') {
				if (crypto[i - 1] != '1' && crypto[i - 1] != '2')
					return 0;
				// 이전 값인 1 또는 2를 그 자체로 활용할 수 없고 현재 값과 합쳐서 10 또는 20으로 사용해야 한다.
				else {
					// 현재 숫자가 0이면서 유효할 땐, 현재 숫자가 앞 숫자와 따로 갈 수 있는 경우가 없으므로 0이다.
					dp[i][0] = 0;
					dp[i][1] = dp[i - 1][0];
				}
			} else {
				if (crypto[i - 1] == '1' || (crypto[i - 1] == '2' && crypto[i] <= '6')) {
					dp[i][0] = (dp[i - 1][0] + dp[i - 1][1]) % 1000000;
					dp[i][1] = dp[i - 1][0];
				} else {
					dp[i][0] = (dp[i - 1][0] + dp[i - 1][1]) % 1000000;
					// 앞 숫자가 1이거나, 앞 숫자가 2이고 현재 숫자가 1~6인 경우를 제외하곤 앞 숫자와 현재 숫자가 붙어서 가는 경우가 없으므로 0이다.
					dp[i][1] = 0;
				}
			}
		}
		return (dp[crypto.length - 1][0] + dp[crypto.length - 1][1]) % 1000000;
	}

	public static void main(String[] args) throws IOException {
		bw.append(String.valueOf(solve(br.readLine().toCharArray()))).append('\n');
		bw.flush();
		br.close();
		bw.close();
	}
}
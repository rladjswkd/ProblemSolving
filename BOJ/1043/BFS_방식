
/*
 * BFS 방식
 */
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.IOException;
import java.util.Deque;
import java.util.ArrayDeque;
import java.util.List;
import java.util.ArrayList;

public class Main {
	private static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	private static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	private static boolean[] detectors;
	private static List<List<Integer>> graph = new ArrayList<>();
	private static Deque<Integer> q = new ArrayDeque<>();

	private static int readInt() throws IOException {
		int n = 0, cur;

		while (48 <= (cur = br.read()) && cur <= 57)
			n = (n << 3) + (n << 1) + (cur & 15);
		return n;
	}

	private static int solve(List<int[]> parties) {
		int cur, res = 0;

		while (!q.isEmpty()) {
			cur = q.removeFirst();
			for (int participant : graph.get(cur)) {
				if (!detectors[participant]) {
					q.addLast(participant);
					detectors[participant] = true;
				}
			}
		}
		for (int[] participants : parties) {
			res++;
			for (int participant : participants) {
				if (detectors[participant]) {
					res--;
					break;
				}
			}
		}
		return res;
	}

	public static void main(String[] args) throws IOException {
		int personCount = readInt(), partyCount = readInt(), initialDetectorCount = readInt(), detector;
		List<int[]> parties = new ArrayList<>();

		detectors = new boolean[personCount];
		for (int i = 0; i < personCount; i++)
			graph.add(new ArrayList<>());
		for (int i = 0; i < initialDetectorCount; i++) {
			detector = readInt() - 1;
			q.addLast(detector);
			detectors[detector] = true;
		}
		for (int i = 0; i < partyCount; i++) {
			parties.add(new int[readInt()]);
			for (int j = 0; j < parties.get(i).length; j++)
				parties.get(i)[j] = readInt() - 1;
			for (int j = 0; j < parties.get(i).length; j++) {
				for (int k = j + 1; k < parties.get(i).length; k++) {
					graph.get(parties.get(i)[j]).add(parties.get(i)[k]);
					graph.get(parties.get(i)[k]).add(parties.get(i)[j]);
				}
			}
		}
		bw.append(String.valueOf(solve(parties))).append('\n');
		bw.flush();
		br.close();
		bw.close();
	}
}
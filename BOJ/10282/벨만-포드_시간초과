
/*
 * BFS + min priority queue
 * 
 * 그냥 BFS를 하면 안되는 이유를 생각해보자.
 * 1
 * 5 6 1
 * 1 2 10
 * 2 5 30
 * 1 3 1
 * 3 2 1
 * 3 4 1
 * 3 5 1
 * 위와 같은 입력이 주어졌을 때, 해킹 당한 컴퓨터 1번부터 시작해 BFS를 돌리면, 2번은 10초 뒤에 감염되는 것으로, 3번은 1초 뒤에 감염되는 것으로 방문처리가 된다.
 * 그 다음 작업은 2번 컴퓨터에 대해 수행되고, 5번이 40초 뒤에 감염되는 것으로 방문처리된다.
 * 따라서 BFS만 사용하면 결과는 40초가 되는데, 이는 정답이 아니다.
 * 
 * 1 -> 3
 * 3 -> 2, 4, 5
 * 경로로 해킹이 되면 2초면 된다.
 * 
 * !!!!!!!! 시작 지점으로부터 나머지 모든 지점까지 방문하는데 걸리는 시간을 측정한 다음 그 중 가장 큰 값 선택 -> 최단 경로 알고리즘 !!!!!!!!!!
 * 다익스트라를 사용할 땐 간선의 개수가 o(V^2 / logV)보다 작을 가능성이 높기 때문에 min priority queue를 사용하자.
 * -> O((V + E) logV)를 V번 반복 -> O((V + E)VlogV)
 * 
 * 벨만-포드 -> O(VE)
 */
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.io.IOException;
import java.util.List;
import java.util.ArrayList;

public class Main {
	private static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	private static StringBuilder sb = new StringBuilder();
	private static List<int[]> edges;
	private static final int INFINITY = 10000 * 1000 + 1;

	private static int readInt() throws IOException {
		int n = 0, cur;

		while (48 <= (cur = System.in.read()) && cur <= 57)
			n = (n << 3) + (n << 1) + (cur & 15);
		return n;
	}

	private static void solve(int computerCount, int hackedComputer) {
		int[] costs = new int[computerCount];
		int time = 0, hackedCount = 0;

		for (int i = 0; i < computerCount; i++)
			costs[i] = INFINITY;
		costs[hackedComputer] = 0;
		for (int i = 0; i < computerCount; i++) {
			for (int[] edge : edges) {
				if (costs[edge[0]] == INFINITY)
					continue;
				if (costs[edge[0]] + edge[2] < costs[edge[1]])
					costs[edge[1]] = costs[edge[0]] + edge[2];
			}
		}
		for (int cost : costs) {
			if (cost == INFINITY)
				continue;
			hackedCount++;
			time = Math.max(time, cost);
		}
		sb.append(hackedCount).append(' ').append(time).append('\n');
		// 음수인 간선이 없으므로 음수 사이클 체크하지 않아도 된다.
	}

	public static void main(String[] args) throws IOException {
		int t = readInt(), computerCount, dependencyCount, hackedComputer, sub;

		while (t-- > 0) {
			computerCount = readInt();
			dependencyCount = readInt();
			hackedComputer = readInt() - 1;
			edges = new ArrayList<>();
			while (dependencyCount-- > 0) {
				sub = readInt() - 1;
				edges.add(new int[] { readInt() - 1, sub, readInt() });
			}
			solve(computerCount, hackedComputer);
		}
		bw.write(sb.toString());
		bw.flush();
		bw.close();
	}
}
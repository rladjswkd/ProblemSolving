
/*
 * 위상 정렬
 * 
 * 가능하면 쉬운 문제부터 풀기 -> 위상 정렬 결과가 여러 개가 아닌 하나다.
 * 
 * dfs로 위상 정렬 구현하고, dfs로 접근할 때도 어려운 문제를 먼저 접근 -> 쉬운 문제가 앞에 정렬될 수 있도록.
 * 
 * 이전 반례는 통과했지만, 실패.
 * 3 2
 * 3 1
 * 3 2
 * 
 */
import java.io.IOException;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class Main {
	private static List<List<Integer>> relation = new ArrayList<>();
	private static int[] res;
	private static int idx;
	private static boolean[] visited;

	private static int readInt() throws IOException {
		int n = System.in.read() & 15, cur;

		while (48 <= (cur = System.in.read()) && cur <= 57)
			n = (n << 3) + (n << 1) + (cur & 15);
		return n;
	}

	private static void solve(int problem) {
		List<Integer> sorted = relation.get(problem);

		visited[problem] = true;
		Collections.sort(sorted, Collections.reverseOrder());
		for (int neighbor : sorted)
			if (!visited[neighbor])
				solve(neighbor);
		res[idx--] = problem + 1;
	}

	public static void main(String[] args) throws IOException {
		int problemCount = readInt(), relationCount = readInt();
		StringBuilder sb = new StringBuilder();

		res = new int[problemCount];
		idx = problemCount - 1;
		visited = new boolean[problemCount];
		for (int i = 0; i < problemCount; i++)
			relation.add(new ArrayList<>());
		for (int i = 0; i < relationCount; i++)
			relation.get(readInt() - 1).add(readInt() - 1);
		// 위상 정렬은 dfs를 먼저 호출하는 인덱스가 나중에 호출하는 인덱스보다 상대적으로 뒤에 정렬되므로, 작은 인덱스를 나중에 호출해야 가능하면
		// 쉬운 문제를 먼저 풀 수 있다.
		for (int i = problemCount - 1; i >= 0; i--)
			if (!visited[i])
				solve(i);
		sb.append(res[0]);
		for (int i = 1; i < problemCount; i++)
			sb.append(' ').append(res[i]);
		System.out.println(sb.toString());
	}
}
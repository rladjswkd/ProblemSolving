
/*
 * 백트래킹?
 * BFS?
 * 길이가 최대 100이고, 시작은 1 ~ 9가 가능하다.
 * -> 0, 9를 제외한 나머지 수는 그 다음 자리로 선택할 수 있는 수가 2가지 -> 2^99(0은 1, 9는 8만 선택할 수 있으므로
 * 실제론 이보다 적겠지만 그래도 무조건 시간 초과)
 * 
 * DP?
 * 길이 0 : 0
 * 길이 1 : 9 -> 0 또는 9로 끝나는 수는 9로 1개
 * 길이 2 : 2^7 + 2 = 130 -> 0 또는 9로 끝나는 수는 10 89로 2개
 * 길이 3 : ... 각 길이 별로 0 ~ 9로 끝나는 수를 추적하는 게 쉬울 거 같다.
 * 
 * 0 1 2 3 4 5 6 7 8 9
 * 0 0 0 0 0 0 0 0 0 0 0
 * 1 0 1 1 1 1 1 1 1 1 1
 * 2 1 1 2 2 2 2 2 2 2 1
 * 3 1 3 3 4 4 4 4 4 3 2
 * 
 * 아.. 문제가 물어보는 게 이게 아니었네 "길이가 N이면서 0 ~ 9 숫자가 모두 등장하는 수의 개수"
 */
import java.io.IOException;

public class Main {
	private static int n, res = 0, validMask = 1023;

	private static int readInt() throws IOException {
		int n = System.in.read() & 15, cur;

		while (48 <= (cur = System.in.read()) && cur <= 57)
			n = (n << 3) + (n << 1) + (cur & 15);
		return n;
	}

	// 백트래킹
	private static void solve(int digit, int length, int checker) {
		// n자리를 모두 고려했을 때, 0 ~ 9까지의 모든 수를 다 방문했다면 res를 1 증가.
		if (length == n) {
			if (checker == validMask)
				res = (res + 1) % 1_000_000_000;
			return;
		}
		if (digit - 1 >= 0)
			solve(digit - 1, length + 1, checker | 1 << digit - 1);
		if (digit + 1 <= 9)
			solve(digit + 1, length + 1, checker | 1 << digit + 1);
	}

	public static void main(String[] args) throws IOException {
		n = readInt();
		if (n < 10)
			System.out.println(0);
		else {
			for (int i = 1; i <= 9; i++)
				solve(i, 1, 1 << i);
			System.out.println(res);
		}
	}
}

/*
 * 지방들이 요청한 예산 중 최소, 최대값을 찾아 양 끝을 포함한 범위 내의 값에 대해 이분 탐색하며 해당 값을 상한액으로 활용할 수 있는지 확인-> 이 중 최대값 출력
 * 
 * log2(100000) = 16.6...
 * n의 최대값 = 10000
 * -> 10000개를 순회하며 모두 더하는 연산을 16.6회 해봐야 17만 이하
 */
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.IOException;
import java.util.Arrays;

public class Main {
	private static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	private static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

	private static int readInt() throws IOException {
		int n = 0, cur;

		while (48 <= (cur = br.read()) && cur <= 57)
			n = (n << 3) + (n << 1) + (cur & 15);
		return n;
	}

	private static int parametricSearch(int[] targets, int[] budgets, int totalBudget) {
		int start = targets[0], end = targets[targets.length - 1], mid = 0;
		long totalTemp;
		// 어떠한 주어진 값을 범위 내에서 찾는 것이 아닌 대상 값들을 검사해야 한다.
		// 따라서 조건에 맞는 값을 찾으면 break하고 해당 값을 반환하면 안되고 최적 값까지 계속 탐색해야 한다.
		while (start < end) {
			mid = (start + end) / 2;
			totalTemp = 0;
			for (int budget : budgets)
				totalTemp += budget < mid ? budget : mid;
			if (totalTemp <= totalBudget)
				start = mid;
			else
				end = mid - 1;
		}
		// start든 end든 같은 값이므로 무얼 반환해도 상관없다.
		return start;
	}

	public static void main(String[] args) throws IOException {
		int budgetCount = readInt(), totalBudget;
		int[] budgets = new int[budgetCount], targets;

		for (int i = 0; i < budgetCount; i++)
			budgets[i] = readInt();
		totalBudget = readInt();
		Arrays.sort(budgets);
		targets = new int[budgets[budgets.length - 1] - budgets[0] + 1];
		for (int i = 0; i < targets.length; i++)
			targets[i] = i + budgets[0];
		bw.append(String.valueOf(parametricSearch(targets, budgets, totalBudget))).append('\n');
		bw.flush();
		br.close();
		bw.close();
	}
}
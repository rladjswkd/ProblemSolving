/*
 * 세 번째 생각한 방식
 * 
 * 1. 예산 요청 금액을 오름차순 정렬한다.
 * 2. 요청한 예산들에 대해 0번 요청부터 자기 자신(i번 요청)까지의 평균 요청 금액을 구한다.
 * 3. 에산 총액을 요청 수로 나눈 평균보다 위에서 구한 부분 평균이 처음으로 큰 인덱스 x를 찾는다.
 * 4. 예산 총액에서 x 이전까지의 금액을 모두 뺀 후, x부터 가장 큰 예산 요청 금액까지의 지방의 수로 나눈 값을 출력한다.
 *
 * 반례
 * 100
 * 24321 38852 62168 46595 80689 48742 37379 54121 56063 23254 52043 76668 57600 43448 27552 43528 14174 64896 5917 21108 23950 58542 15128 46576 41137 13162 38268 49564 26841 54994 64667 50352 37028 19557 45369 47520 51268 49421 17344 20531 19297 42999 49527 39955 10821 72154 35723 19733 66228 44121 82630 35087 9311 58212 95583 46100 99026 24685 84155 97912 43954 32537 74191 44243 12709 39137 27824 38600 38360 84819 55259 79282 11087 74802 39848 38292 27541 42146 23195 83108 57167 11684 92066 70048 85238 38697 40818 97187 24969 79746 50172 87589 76236 33312 83328 77735 29603 68860 85786 32760
 * 2000000
 * 
 * 정답은 20924지만, 20029를 출력한다.
 *
 */

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.IOException;
import java.util.Arrays;

public class Main {
	private static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	private static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	private static int[] req, avg;

	private static int readInt() throws IOException {
		int n = 0, cur;

		while (48 <= (cur = br.read()) && cur <= 57)
			n = (n << 3) + (n << 1) + (cur & 15);
		return n;
	}

	private static int searchUpperBound(int val) {
		int start = 0, end = avg.length - 1, ub = end;

		while (start < end) {
			ub = (start + end) / 2;
			if (avg[ub] <= val)
				start = ub + 1;
			else
				end = ub;
		}
		// start == end이므로 start를 반환해도 된다.
		return end;
	}

	public static void main(String[] args) throws IOException {
		int total, idxUB, acc = 0, max = 0;

		req = new int[readInt()];
		avg = new int[req.length];
		for (int i = 0; i < req.length; i++) {
			req[i] = readInt();
			acc += req[i];
			if (max < req[i])
				max = req[i];
		}
		total = readInt();
		if (acc <= total)
			bw.append(String.valueOf(max)).append('\n');
		else {
			Arrays.sort(req);
			// i번째 예산 요청까지의 합을 누적하기 위한 변수로 재활용
			acc = 0;
			for (int i = 0; i < avg.length; i++)
				avg[i] = (acc += req[i]) / (i + 1);
			idxUB = searchUpperBound(total / req.length);
			for (int i = 0; i < idxUB; i++)
				total -= req[i];
			bw.append(String.valueOf(total / (req.length - idxUB))).append('\n');
		}
		bw.flush();
		br.close();
		bw.close();
	}
}
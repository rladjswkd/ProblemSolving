/*
 * 
 * 두 번째 생각한 방식
 * 
 * 1. 예산 요청 금액을 오름차순 정렬한다.
 * 2. 요청한 예산들의 합을 요청한 지방의 수로 나눈 평균을 처음으로 넘는 예산 요청 금액 x를 찾는다.
 * 3. 예산 총액에서 x 이전까지의 금액을 모두 뺀 후, x부터 가장 큰 예산 요청 금액까지의 지방의 수로 나눈 값을 출력한다.
 * 
 * 반례
 * 5
 * 100 100 100 100 100
 * 10
 * 정답은 2지만 -390을 출력한다.
 */

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.IOException;
import java.util.Arrays;

public class Main {
	private static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	private static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	private static int[] req;

	private static int readInt() throws IOException {
		int n = 0, cur;

		while (48 <= (cur = br.read()) && cur <= 57)
			n = (n << 3) + (n << 1) + (cur & 15);
		return n;
	}

	private static int searchUpperBound(int val) {
		int start = 0, end = req.length - 1, ub = end;

		while (start < end) {
			ub = (start + end) / 2;
			if (req[ub] <= val)
				start = ub + 1;
			else
				end = ub;
		}
		// start == end이므로 start를 반환해도 된다.
		return end;
	}

	public static void main(String[] args) throws IOException {
		int total, idxUB, acc = 0, max = 0;

		req = new int[readInt()];
		for (int i = 0; i < req.length; i++) {
			req[i] = readInt();
			acc += req[i];
			if (max < req[i])
				max = req[i];
		}
		total = readInt();
		if (acc <= total)
			bw.append(String.valueOf(max)).append('\n');
		else {
			Arrays.sort(req);
			idxUB = searchUpperBound(acc / req.length);
			for (int i = 0; i < idxUB; i++)
				total -= req[i];
			bw.append(String.valueOf(total / (req.length - idxUB))).append('\n');
		}
		bw.flush();
		br.close();
		bw.close();
	}
}
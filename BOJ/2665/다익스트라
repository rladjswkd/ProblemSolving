
/*
 * 다익스트라 알고리즘
 * 
 * 중요한 점은 이동할 다음 방이 검은 방일 땐 비용을 1, 흰 방일땐 비용을 0으로 설정하는 것이다.
 * 그러면 비용이 싼 방을 먼저 이동하므로 흰 방이 항상 검은 방보다 먼저 선택될 것이고
 * 검은 방은 더이상 이동할 수 있는 흰 방이 없을 때, 검은 방들 중 가장 비용이 적은 방부터 선택될 것이다.
 * 이후 다시 흰 방이 하나라도 선택 가능해질 때, 검은 방과 흰 방의 비용이 같다고 해도 결국 도착 지점까지의 비용은 최소 비용으로 선택된다.
 */
import java.io.IOException;
import java.util.PriorityQueue;

public class Main {
	private static int n, INFINITY = 49 + 48 + 1;
	private static int[][] rooms;
	private static int[] dx = new int[] { -1, 1, 0, 0 }, dy = new int[] { 0, 0, -1, 1 };

	private static int readInt() throws IOException {
		int n = System.in.read() & 15, cur;

		while (48 <= (cur = System.in.read()) && cur <= 57)
			n = (n << 3) + (n << 1) + (cur & 15);
		return n;
	}

	private static int solve() {
		// int[0] : 행 인덱스, int[1]: 열 인덱스, int[2]: 출발지부터 그 지점까지 도달하는데 거쳐온 검은 방의 수
		PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[2] - b[2]);
		int[][] costs = new int[n][n];
		boolean[][] processed = new boolean[n][n];
		int[] cur;
		int nx, ny, cost;

		for (int i = 0; i < n; i++)
			for (int j = 0; j < n; j++)
				costs[i][j] = INFINITY;
		costs[0][0] = 0;
		pq.add(new int[] { 0, 0, 0 });
		while (!pq.isEmpty() && !processed[n - 1][n - 1]) {
			cur = pq.poll();
			if (processed[cur[0]][cur[1]])
				continue;
			for (int i = 0; i < 4; i++) {
				nx = cur[0] + dx[i];
				ny = cur[1] + dy[i];
				if (nx < 0 || n <= nx || ny < 0 || n <= ny || processed[nx][ny])
					continue;
				// 다음 방이 검은색이면 이동 비용이 1, 흰 방이면 이동 비용이 0이다.
				cost = rooms[nx][ny] == 0 ? 1 : 0;
				if (costs[cur[0]][cur[1]] + cost < costs[nx][ny]) {
					costs[nx][ny] = costs[cur[0]][cur[1]] + cost;
					pq.add(new int[] { nx, ny, costs[nx][ny] });
				}
				processed[cur[0]][cur[1]] = true;
			}
		}
		return costs[n - 1][n - 1];
	}

	public static void main(String[] args) throws IOException {
		n = readInt();
		rooms = new int[n][n];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++)
				rooms[i][j] = System.in.read() & 15;
			// '\n'
			System.in.read();
		}
		System.out.println(solve());
	}
}